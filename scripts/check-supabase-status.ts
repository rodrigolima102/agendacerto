import 'dotenv/config';

const SUPABASE_URL = process.env.SUPABASE_URL || 'https://tqsibusymtsvpihnyieo.supabase.co';
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY || 'sb_secret_WDcPbCqaInWcDxlGQb-Nww_eMslH8QO';
const SUPABASE_ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'sb_publishable_yCnml2-JPc_uySkMiSasMg_eUKbMzhl';

async function checkSupabaseStatus() {
  console.log('üîç Verificando status completo do Supabase...\n');
  console.log(`üì° URL: ${SUPABASE_URL}`);
  console.log(`üîë Service Key: ${SUPABASE_SERVICE_KEY.substring(0, 20)}...`);
  console.log(`üîë Anon Key: ${SUPABASE_ANON_KEY.substring(0, 20)}...\n`);

  try {
    // 1. Testar conex√£o b√°sica
    console.log('1Ô∏è‚É£ Testando conex√£o b√°sica...');
    const basicResponse = await fetch(`${SUPABASE_URL}/rest/v1/`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
      },
    });

    if (basicResponse.ok) {
      console.log('‚úÖ Conex√£o b√°sica funcionando');
    } else {
      console.log('‚ùå Erro na conex√£o b√°sica:', basicResponse.status, basicResponse.statusText);
      return;
    }

    // 2. Verificar tabelas existentes
    console.log('\n2Ô∏è‚É£ Verificando tabelas existentes...');
    const tablesResponse = await fetch(`${SUPABASE_URL}/rest/v1/`, {
      headers: {
        'apikey': SUPABASE_SERVICE_KEY,
        'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
      },
    });

    if (tablesResponse.ok) {
      console.log('‚úÖ Acesso √†s tabelas funcionando');
    } else {
      console.log('‚ùå Erro no acesso √†s tabelas:', tablesResponse.status);
    }

    // 3. Verificar tabela empresas especificamente
    console.log('\n3Ô∏è‚É£ Verificando tabela empresas...');
    const empresasResponse = await fetch(`${SUPABASE_URL}/rest/v1/empresas?select=id&limit=1`, {
      headers: {
        'apikey': SUPABASE_SERVICE_KEY,
        'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
      },
    });

    if (empresasResponse.ok) {
      const empresasData = await empresasResponse.json();
      console.log('‚úÖ Tabela empresas acess√≠vel');
      console.log(`üìä Registros encontrados: ${empresasData.length}`);
    } else {
      console.log('‚ùå Erro na tabela empresas:', empresasResponse.status);
      const errorText = await empresasResponse.text();
      console.log('Detalhes:', errorText);
    }

    // 4. Verificar tabela profiles
    console.log('\n4Ô∏è‚É£ Verificando tabela profiles...');
    const profilesResponse = await fetch(`${SUPABASE_URL}/rest/v1/profiles?select=id&limit=1`, {
      headers: {
        'apikey': SUPABASE_SERVICE_KEY,
        'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
      },
    });

    if (profilesResponse.ok) {
      const profilesData = await profilesResponse.json();
      console.log('‚úÖ Tabela profiles acess√≠vel');
      console.log(`üìä Registros encontrados: ${profilesData.length}`);
    } else {
      console.log('‚ùå Erro na tabela profiles:', profilesResponse.status);
      const errorText = await profilesResponse.text();
      console.log('Detalhes:', errorText);
    }

    // 5. Verificar usu√°rios
    console.log('\n5Ô∏è‚É£ Verificando usu√°rios...');
    const usersResponse = await fetch(`${SUPABASE_URL}/rest/v1/auth/users`, {
      headers: {
        'apikey': SUPABASE_SERVICE_KEY,
        'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
      },
    });

    if (usersResponse.ok) {
      const usersData = await usersResponse.json();
      console.log('‚úÖ Usu√°rios acess√≠veis');
      console.log(`üë• Total de usu√°rios: ${usersData.length}`);
      if (usersData.length > 0) {
        console.log('üìß √öltimos usu√°rios:');
        usersData.slice(0, 3).forEach((user: any) => {
          console.log(`   - ${user.email} (${user.created_at})`);
        });
      }
    } else {
      console.log('‚ùå Erro no acesso aos usu√°rios:', usersResponse.status);
    }

    // 6. Testar inser√ß√£o com service role
    console.log('\n6Ô∏è‚É£ Testando inser√ß√£o com service role...');
    const testInsertResponse = await fetch(`${SUPABASE_URL}/rest/v1/empresas`, {
      method: 'POST',
      headers: {
        'apikey': SUPABASE_SERVICE_KEY,
        'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
        'Content-Type': 'application/json',
        'Prefer': 'return=minimal',
      },
      body: JSON.stringify({
        user_id: '00000000-0000-0000-0000-000000000000',
        nome: 'Teste Status',
        slug: 'teste-status-' + Date.now(),
      }),
    });

    if (testInsertResponse.ok) {
      console.log('‚úÖ Inser√ß√£o com service role funcionando');
    } else {
      const errorText = await testInsertResponse.text();
      console.log('‚ùå Erro na inser√ß√£o:', errorText);
    }

    console.log('\nüéâ Verifica√ß√£o completa!');
    console.log('\nüìã Resumo:');
    console.log('- Projeto Supabase: ‚úÖ Ativo');
    console.log('- Conex√£o: ‚úÖ Funcionando');
    console.log('- Tabelas: ‚úÖ Acess√≠veis');
    console.log('- Service Role: ‚úÖ Funcionando');

  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error);
  }
}

checkSupabaseStatus().catch(console.error);
